submodule nokia-conf-router-bgp {

    yang-version "1.1";

    belongs-to nokia-conf { prefix "conf"; }

    import nokia-sros-yang-extensions     { prefix "sros-ext"; }
    import nokia-types-bgp                { prefix "types-bgp"; }
    import nokia-types-router             { prefix "types-router"; }
    import nokia-types-sros               { prefix "types-sros"; }

    include nokia-conf-bmp;
    include nokia-conf-groups;
    include nokia-conf-system;
    include nokia-conf-system-security;

    sros-ext:sros-major-release "rel19";

    organization "Nokia";

    contact
        "Nokia SR OS Support
         Web: <http://www.nokia.com>";

    description
        "Nokia YANG Data model to configure bgp protocol on SR OS based routers.

         Copyright 2016 Nokia. All rights reserved. Reproduction of this document
         is authorized on the condition that the foregoing copyright notice is included.

         This nokia-conf-router-bgp YANG module embodies Nokia's proprietary
         intellectual property. Nokia retains all title and ownership in the
         specification, including any revisions.

         Nokia grants all interested parties a non-exclusive license to use
         and distribute an unmodified copy of this specification in connection with
         management of Nokia products, and without fee, provided this
         copyright notice and license appear on all copies.

         This specification is supplied `as is', and Nokia makes no warranty,
         either express or implied, as to the use, operation, condition, or performance
         of the specification.";

    revision "2019-04-22";

    grouping conf-router-bgp {
        container bgp {
            presence "Enables bgp functionality on this router";
            description "Enter the bgp context";

            leaf description {
                type types-sros:description;
                description "Text description";
            }

            leaf connect-retry {
                type int32 {
                    range "1..65535";
                }
                default "120";
                description "BGP connect retry timer value";
            }

            leaf admin-state {
                type types-sros:admin-state;
                default "enable";
                description "Administrative state of BGP instance";
            }

            leaf keepalive {
                type int32 {
                    range "0..21845";
                }
                default "30";
                description "Time after which the keepalive message is sent";
            }

            leaf damping {
                type boolean;
                default "false";
                description "Use BGP route damping for learned routes defined within the route policy";
            }

            leaf local-preference {
                type uint32;
                default "100";
                description "Default value for local preference attribute if not specified in incoming routes";
            }

            leaf loop-detect {
                type types-bgp:loop-detect;
                default "ignore-loop";
                description "Loop detection strategy in AS path";
            }

            leaf loop-detect-threshold {
                type uint32 {
                    range "0..15";
                }
                default "0";
                description "Configure the limit for the number of times global ASN appears in a received AS path&.";
            }

            leaf min-route-advertisement {
                type int16 {
                    range "1..255";
                }
                default "30";
                description "Minimum interval between successive updates of prefix toward peer";
            }

            leaf aggregator-id-zero {
                type boolean;
                default "false";
                description "Set router ID in aggregator path attribute to zero when BGP aggregates routes";
            }

            leaf preference {
                type uint32 {
                    range "1..255";
                }
                default "170";
                description "Route preference for routes learned from all peers";
            }

            leaf multihop {
                type int32 {
                    range "1..255";
                }
                description "TTL value entered in IP header of packets sent to peer";
            }

            leaf med-out {
                type union {
                    type uint32;
                    type enumeration {
                        enum "igp-cost"                     { value -1; }
                    }
                }
                description "Multi-Exit Discriminator (MED) identifier";
            }

            leaf authentication-key {
                type types-sros:encrypted-leaf {
                    length "1..370";
                }
                description "Configure the BGP authentication key for all peers.";
            }

            leaf client-reflect {
                type boolean;
                default "true";
                description "Enable client reflection of routes by the route reflector";
            }

            leaf vpn-apply-export {
                type boolean;
                default "false";
                description "Apply base instance BGP export route polices to BGP VPN routes";
            }

            leaf vpn-apply-import {
                type boolean;
                default "false";
                description "Apply base instance BGP import route polices to BGP VPN routes";
            }

            leaf asn-4-byte {
                type boolean;
                default "true";
                description "Allow use of 4-byte ASNs";
            }

            leaf path-mtu-discovery {
                type boolean;
                default "false";
                description "Allow path MTU discovery for associated TCP connections";
            }

            leaf enforce-first-as {
                type boolean;
                default "false";
                description "Compare most recent ASN in AS_PATH attribute of each route to configured peer AS of session for match";
            }

            leaf initial-send-delay-zero {
                type boolean;
                default "false";
                description "Bypass minimum route advertisement interval and send BGP updates as soon as session comes up";
            }

            leaf router-id {
                type types-sros:ipv4-address;
                description "Unique router ID for BGP instance in AS";
            }

            leaf inter-as-vpn {
                type boolean;
                default "false";
                description "Configure BGP to enable sending VPN routes across AS boundaries";
            }

            leaf purge-timer {
                type uint32 {
                    range "1..60";
                }
                default "10";
                description "Maximum time before stale routes are purged";
            }

            leaf route-table-install {
                type boolean;
                default "true";
                description "Enable/Disable route table installation";
            }

            leaf ibgp-multipath {
                type boolean;
                default "false";
                description "Add IBGP routes with multiple next hops to route table";
            }

            leaf rr-vpn-forwarding {
                type boolean;
                default "false";
                description
                    "Configure BGP to enable route-reflector to resolve the VPN-IPv4 and VPN-IPv6
                     routes, set itself as the next-hop and generate new labels for all the
                     resolved routes.";
            }

            leaf bfd-liveness {
                type boolean;
                default "false";
                description "Use Bidirectional Forwarding Detection";
            }

            leaf fast-external-failover {
                type boolean;
                default "true";
                description
                    "Specifies whether the router should drop an external
                     BGP session immediately when the local interface goes
                     down, or whether the BGP session should be kept up until
                     the holdtime expires.";
            }

            leaf advertise-inactive {
                type boolean;
                default "false";
                description "Advertise inactive BGP routes to other BGP peers";
            }

            leaf authentication-keychain {
                type leafref {
                    path "../../../system/security/keychains/keychain/keychain-name";
                }
                description
                    "The value specifies the keychain which will be used to
                     sign and/or authenticate the BGP protocol stream.";
            }

            leaf mvpn-vrf-import-subtype-new {
                type boolean;
                default "false";
                description "Encode the new IANA value of 0x010b in advertised routes";
            }

            leaf rapid-withdrawal {
                type boolean;
                default "false";
                description "Send BGP withdrawals immediately without MRAI timer expiring";
            }

            leaf mp-bgp-keep {
                type boolean;
                default "false";
                description "Keep information for all Multiprotocol BGP routes on BGP router instance";
            }

            leaf peer-ip-tracking {
                type boolean;
                default "false";
                description "Allow BGP peer tracking";
            }

            leaf split-horizon {
                type boolean;
                default "false";
                description "Prevent routes from being reflected back to peer that sends best route";
            }

            leaf override-tunnel-elc {
                type boolean;
                default "false";
                description "Render all far ends for BGP tunnels as entropy-label-capable, despite received capability signaling";
            }

            leaf link-state-route-export {
                type boolean;
                default "false";
                description "Specifies whether to export the TED database into BGP.";
            }

            leaf link-state-route-import {
                type boolean;
                default "false";
                description
                    "Specifies whether to receive TED NLRI updates. It is
                     applicable to only Virtual Service Router (VSR) running
                     within a Network Service Provider (NSP).";
            }

            leaf third-party-nexthop {
                type boolean;
                default "false";
                description "Send third-party next hop to EBGP peers in same subnet as source peer";
            }

            leaf dynamic-neighbor-limit {
                type uint32 {
                    range "1..8192";
                }
                description "Dynamic peer limit for BGP instance";
            }

            leaf label-preference {
                type uint32 {
                    range "1..255";
                }
                default "170";
                description "Route preference for routes learned from labeled unicast peers";
            }

            leaf peer-tracking-policy {
                type types-sros:named-item-64;
                description "Policy for BGP peer tracking on router instance";
            }

            leaf def-recv-evpn-encap {
                type types-bgp:encap;
                default "mpls";
                description "Default encapsulation type when EVPN route is received without BGP encapsulation extended community";
            }

            leaf sr-policy-import {
                type boolean;
                default "false";
                description "Import all statically-configured non-local SR policies into BGP RIB";
            }

            leaf-list apply-groups {
                type leafref {
                    path "../../../groups/group/name";
                }
                max-elements 8;
                ordered-by user;
                description "Apply a configuration group at this level";
            }

            container hold-time {
                description "Enter the hold-time context";

                leaf seconds {
                    type int32 {
                        range "0|3..65535";
                    }
                    default "90";
                    description "BGP hold time";
                }

                leaf minimum-hold-time {
                    type int32 {
                        range "0|3..65535";
                    }
                    default "0";
                    description "Minimum hold time that is strictly enforced";
                }

            } // container hold-time

            container family {
                description "Enter the family context";

                leaf ipv4 {
                    type boolean;
                    default "true";
                    description "Support IPv4 address family";
                }

                leaf vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Support VPN IPv4 address family";
                }

                leaf ipv6 {
                    type boolean;
                    default "false";
                    description "Support IPv6 address family";
                }

                leaf mcast-ipv4 {
                    type boolean;
                    default "false";
                    description "Support multicast IPv4 address family";
                }

                leaf vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Support VPN IPv6 address family";
                }

                leaf l2-vpn {
                    type boolean;
                    default "false";
                    description "Support L2 VPN address family";
                }

                leaf mvpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Support MVPN IPv4 address family";
                }

                leaf mdt-safi {
                    type boolean;
                    default "false";
                    description "Support Multicast Distribution Tree (MDT) SAFI address family";
                }

                leaf ms-pw {
                    type boolean;
                    default "false";
                    description "Support multi-segment pseudowire address family";
                }

                leaf flow-ipv4 {
                    type boolean;
                    default "false";
                    description "Support flowspec IPv4 address family";
                }

                leaf route-target {
                    type boolean;
                    default "false";
                    description "Support address family for RT constrain routes";
                }

                leaf mcast-vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Support multicast VPN IPv4 address family";
                }

                leaf mvpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Support MVPN IPv6 address family";
                }

                leaf flow-ipv6 {
                    type boolean;
                    default "false";
                    description "Support flowspec IPv6 address family";
                }

                leaf evpn {
                    type boolean;
                    default "false";
                    description "Support EVPN address family";
                }

                leaf mcast-ipv6 {
                    type boolean;
                    default "false";
                    description "Support multicast IPv6 address family";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Support labeled IPv4 address family";
                }

                leaf label-ipv6 {
                    type boolean;
                    default "false";
                    description "Support labeled IPv6 address family";
                }

                leaf bgp-ls {
                    type boolean;
                    default "false";
                    description "Support BGP-LS address family";
                }

                leaf mcast-vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Support multicast VPN IPv6 address family";
                }

                leaf sr-policy-ipv4 {
                    type boolean;
                    default "false";
                    description "Advertise capability for AFI1/SAFI73, BGP routes that encode an SR policy to an IPv4 destination";
                }

            } // container family

            container default-preference {
                description "Configure the route preference for ebgp and ibgp routes.";

                leaf ebgp {
                    type uint32 {
                        range "0..255";
                    }
                    default "0";
                    description "Configure preference for ebgp.";
                }

                leaf ibgp {
                    type uint32 {
                        range "0..255";
                    }
                    default "0";
                    description "Configure preference for ibgp.";
                }

            } // container default-preference

            container default-label-preference {
                description "Configure the route label preference for ebgp and ibgp routes.";

                leaf ebgp {
                    type uint32 {
                        range "0..255";
                    }
                    default "0";
                    description "Configure preference for ebgp.";
                }

                leaf ibgp {
                    type uint32 {
                        range "0..255";
                    }
                    default "0";
                    description "Configure preference for ibgp.";
                }

            } // container default-label-preference

            container remove-private {
                presence "Remove private AS numbers from the AS Path before advertising to a peer.";
                description "Enter the remove-private context";

                leaf limited {
                    type boolean;
                    default "false";
                    description "Remove private ASNs up to the first public ASN encountered";
                }

                leaf skip-peer-as {
                    type boolean;
                    default "false";
                    description "Keep a private ASN in the AS path if that ASN is the same as the BGP peer ASN";
                }

            } // container remove-private

            container cluster {
                description "Enter the cluster context";

                leaf cluster-id {
                    type types-sros:ipv4-address;
                    description "Cluster ID for route reflector server";
                }

                leaf orr-location {
                    type uint32 {
                        range "1..16";
                    }
                    description "Optimal route reflection location for cluster ID";
                }

                leaf allow-local-fallback {
                    type boolean;
                    default "false";
                    description "Allow fallback to RR default location when no BGP routes reachable from  ORR location";
                }

            } // container cluster

            container ebgp-default-reject-policy {
                description
                    "Configure the BGP default policy for routes received from or advertised
                     to external peers.";

                leaf import {
                    type boolean;
                    default "true";
                    description "Enable/disable default reject import policy for external peers.";
                }

                leaf export {
                    type boolean;
                    default "true";
                    description "Enable/disable default reject export policy for external peers.";
                }

            } // container ebgp-default-reject-policy

            container local-as {
                description "Enter the local-as context";

                leaf as-number {
                    type uint32 {
                        range "1..4294967295";
                    }
                    description "BGP AS number";
                }

                leaf private {
                    type boolean;
                    default "false";
                    description "Hide local AS number in paths learned from peering";
                }

                leaf prepend-global-as {
                    type boolean;
                    default "true";
                    description "Prepend global AS number when advertising routes to EBGP peer";
                }

            } // container local-as

            container best-path-selection {
                description "Enter the best-path-selection context";

                leaf compare-origin-validation-state {
                    type boolean;
                    default "false";
                    description "Use origin validation state in BGP decision process";
                }

                leaf deterministic-med {
                    type boolean;
                    default "false";
                    description "Use deterministic MED for BGP instance";
                }

                leaf origin-invalid-unusable {
                    type boolean;
                    default "false";
                    description "Consider routes with 'Invalid' origin validation state as unusable by best path selection algorithm";
                }

                leaf ignore-nh-metric {
                    type boolean;
                    default "false";
                    description "Ignore next hop metric for best routes of base router BGP instance";
                }

                container always-compare-med {
                    description "Enter the always-compare-med context";

                    leaf med-value {
                        type types-bgp:med-value;
                        default "off";
                        description "MED path attribute";
                    }

                    leaf strict-as {
                        type boolean;
                        default "true";
                        description "Compare MED path attribute between routes from same neighbor AS only";
                    }

                } // container always-compare-med

                container as-path-ignore {
                    description "Enter the as-path-ignore context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Support IPv4 address family";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv4 address family";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Support IPv6 address family";
                    }

                    leaf mcast-ipv4 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv4 address family";
                    }

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv6 address family";
                    }

                    leaf l2-vpn {
                        type boolean;
                        default "false";
                        description "Support L2 VPN address family";
                    }

                    leaf mvpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv4 address family";
                    }

                    leaf mvpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv6 address family";
                    }

                    leaf mcast-ipv6 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv6 address family";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv4 address family";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv6 address family";
                    }

                } // container as-path-ignore

                container ignore-router-id {
                    presence
                        "Specifies whether to ignore the BGP identifier (router-ID)
                         comparison when comparing two paths learned from different
                         EBGP neighbors as long as both paths are not from a
                         configured-BGP peer.";
                    description "Enter the ignore-router-id context";

                    container include-internal {
                        description "Enter the include-internal context";

                        leaf mvpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Include MVPN IPv4 address family";
                        }

                        leaf mvpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Include MVPN IPv6 address family";
                        }

                    } // container include-internal

                } // container ignore-router-id

                container ebgp-ibgp-equal {
                    description "Enter the ebgp-ibgp-equal context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for unlabeled unicast IPv4 routes";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for unlabeled unicast IPv6 routes";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for IPv4 VPN routes";
                    }

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for IPv6 VPN routes";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for labeled unicast IPv4 routes";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Load balance eBGP and iBGP paths for labeled unicast IPv6 routes";
                    }

                } // container ebgp-ibgp-equal

            } // container best-path-selection

            container send-communities {
                description "Enter the send-communities context";

                leaf standard {
                    type boolean;
                    default "true";
                    description
                        "Enables the sending of community attribute to the
                         peer for non-external communities.";
                }

                leaf extended {
                    type boolean;
                    default "true";
                    description
                        "Enables the sending of community attribute to the
                         peer for external communities.";
                }

                leaf large {
                    type boolean;
                    default "true";
                    description
                        "Enables the sending of community attribute to the
                         peer for large communities.";
                }

            } // container send-communities

            container error-handling {
                description "Enter the error-handling context";

                leaf update-fault-tolerance {
                    type boolean;
                    default "false";
                    description "Consider non-critical errors as treat-as-withdraw and do not trigger session reset";
                }

            } // container error-handling

            container damp-peer-oscillations {
                presence "Timers settings for damp-peer-oscillation";
                description "Enter the damp-peer-oscillations context";

                leaf error-interval {
                    type uint32 {
                        range "0..2048";
                    }
                    default "30";
                    description "Error free interval after session reset, to return idle-hold-time to initial-wait";
                }

                container idle-hold-time {
                    description "Enter the idle-hold-time context";

                    leaf initial-wait {
                        type uint32 {
                            range "0..2048";
                        }
                        default "0";
                        description "Time a session remains in idle state after session stabilized";
                    }

                    leaf second-wait {
                        type uint32 {
                            range "1..2048";
                        }
                        default "5";
                        description "Time that doubles after each session failure within relatively short time";
                    }

                    leaf max-wait {
                        type uint32 {
                            range "1..2048";
                        }
                        default "60";
                        description "Maximum session idle time after repeated instability";
                    }

                } // container idle-hold-time

            } // container damp-peer-oscillations

            container rapid-update {
                description "Enter the rapid-update context";

                leaf vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Include VPN IPv4 address family";
                }

                leaf vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Include VPN IPv6 address family";
                }

                leaf l2-vpn {
                    type boolean;
                    default "false";
                    description "Include L2 VPN address family";
                }

                leaf mvpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Include MVPN IPv4 address family";
                }

                leaf mdt-safi {
                    type boolean;
                    default "false";
                    description "Include Multicast Distribution Tree (MDT) SAFI address family";
                }

                leaf mcast-vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Include multicast VPN IPv4 address family";
                }

                leaf mvpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Include MVPN IPv6 address family";
                }

                leaf evpn {
                    type boolean;
                    default "false";
                    description "Include EVPN address family";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Include labeled IPv4 address family";
                }

                leaf label-ipv6 {
                    type boolean;
                    default "false";
                    description "Include labeled IPv6 address family";
                }

                leaf mcast-vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Include multicast VPN IPv6 address family";
                }

            } // container rapid-update

            container advertise-external {
                description "Enter the advertise-external context";

                leaf ipv4 {
                    type boolean;
                    default "false";
                    description "Support unlabeled unicast IPv4 routes";
                }

                leaf ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type ipv6.";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label-ipv4.";
                }

                leaf label-ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label-ipv6.";
                }

            } // container advertise-external

            container backup-path {
                description "Enter the backup-path context";

                leaf ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type ipv4.";
                }

                leaf ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type ipv6.";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label-ipv4.";
                }

                leaf label-ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label-ipv6.";
                }

            } // container backup-path

            container flowspec {
                description "Enter the flowspec context";

                leaf validate-dest-prefix {
                    type boolean;
                    default "false";
                    description "Validate received IPv4 and IPv6 flowspec routes that contain destination prefix";
                }

                leaf validate-redirect-ip {
                    type boolean;
                    default "false";
                    description "Validate the redirect-to-IPv4 action attached to flowspec IPv4 routes received by the BGP instance";
                }

            } // container flowspec

            container neighbor-trust {
                description "Enter the neighbor-trust context";

                leaf vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type vpn-ipv4.";
                }

                leaf vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type vpn-ipv6.";
                }

            } // container neighbor-trust

            container add-paths {
                presence "Famly settings for add-paths";
                description "Enter the add-paths context";

                container ipv4 {
                    description "Enter the ipv4 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per unlabeled IPv4 unicast prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple unlabeled unicast routes per IPv4 prefix";
                    }

                } // container ipv4

                container ipv6 {
                    description "Enter the ipv6 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Max number of paths per unlabeled unicast IPv6 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple unlabeled unicast routes per IPv6 prefix";
                    }

                } // container ipv6

                container label-ipv4 {
                    description "Enter the label-ipv4 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per labeled-unicast IPv4 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple labeled-unicast routes per IPv4 prefix";
                    }

                } // container label-ipv4

                container label-ipv6 {
                    description "Enter the label-ipv6 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per labeled-unicast IPv6 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple labeled unicast routes per IPv6 prefix";
                    }

                } // container label-ipv6

                container vpn-ipv4 {
                    description "Enter the vpn-ipv4 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per VPN-IPv4 NLRI that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive VPN-IPv4 routes";
                    }

                } // container vpn-ipv4

                container vpn-ipv6 {
                    description "Enter the vpn-ipv6 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per VPN-IPv6 NLRI that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple VPN-IPv6 routes";
                    }

                } // container vpn-ipv6

                container mvpn-ipv4 {
                    description "Enter the mvpn-ipv4 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple multicast VPN routes per IPv4 prefix";
                    }

                } // container mvpn-ipv4

                container mvpn-ipv6 {
                    description "Enter the mvpn-ipv6 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per multicast VPN IPv6 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                    }

                } // container mvpn-ipv6

                container mcast-vpn-ipv4 {
                    description "Enter the mcast-vpn-ipv4 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple multicast routes per IPv4 VPN prefix";
                    }

                } // container mcast-vpn-ipv4

                container mcast-vpn-ipv6 {
                    description "Enter the mcast-vpn-ipv6 context";

                    leaf send {
                        type int32 {
                            range "1..16";
                        }
                        description "Maximum number of paths per multicast IPv6 VPN prefix that can be advertised to add-path peers";
                    }

                    leaf receive {
                        type boolean;
                        default "false";
                        description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                    }

                } // container mcast-vpn-ipv6

            } // container add-paths

            container import {
                presence "Enables bgp import polices at the instance level";
                description "Enter the import context";

                leaf-list policy {
                    type string {
                        length "1..255";
                        pattern "(.{1,64})|(.*[\\[].*)" {
                            error-message "Policy name too long or expression not valid";
                        }
                    }
                    min-elements 1;
                    max-elements 15;
                    ordered-by user;
                    description "Import policy name";
                }

            } // container import

            container export {
                presence "Enables bgp export polices at the instance level";
                description "Enter the export context";

                leaf-list policy {
                    type string {
                        length "1..255";
                        pattern "(.{1,64})|(.*[\\[].*)" {
                            error-message "Policy name too long or expression not valid";
                        }
                    }
                    min-elements 1;
                    max-elements 15;
                    ordered-by user;
                    description "Export policy name";
                }

            } // container export

            container extended-nh-encoding {
                description "Enter the extended-nh-encoding context";

                leaf vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type VPN IPv4.";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label IPv4.";
                }

                leaf ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type ipv4.";
                }

            } // container extended-nh-encoding

            container advertise-ipv6-next-hops {
                description "Enter the advertise-ipv6-next-hops context";

                leaf vpn-ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type VPN IPv6.";
                }

                leaf label-ipv6 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label IPv6.";
                }

                leaf evpn {
                    type boolean;
                    default "false";
                    description "Enable/disable family type evpn.";
                }

                leaf vpn-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type VPN IPv4.";
                }

                leaf label-ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type label IPv4.";
                }

                leaf ipv4 {
                    type boolean;
                    default "false";
                    description "Enable/disable family type ipv4.";
                }

            } // container advertise-ipv6-next-hops

            container graceful-restart {
                presence "Enable/disable graceful-restart for BGP process.";
                description "Enter the graceful-restart context";

                leaf restart-time {
                    type uint32 {
                        range "0..4095";
                    }
                    default "120";
                    description "BGP graceful restart time";
                }

                leaf stale-routes-time {
                    type uint32 {
                        range "1..3600";
                    }
                    default "360";
                    description "Maximum time that stale routes maintain after graceful restart is initiated";
                }

                leaf gr-notification {
                    type boolean;
                    default "false";
                    description "Enable graceful restart capability indicating support for NOTIFICATION messages";
                }

                container long-lived {
                    presence "Long Lived Graceful restart attributes for BGP process.";
                    description "Enter the long-lived context";

                    leaf advertised-stale-time {
                        type uint32 {
                            range "0..16777215";
                        }
                        default "86400";
                        description "Long-lived stale time that is advertised by router in its LLGR capability";
                    }

                    leaf helper-override-stale-time {
                        type uint32 {
                            range "0..16777215";
                        }
                        description "Locally-imposed LLGR stale time";
                    }

                    leaf helper-override-restart-time {
                        type uint32 {
                            range "0..4095";
                        }
                        description "Locally-imposed restart time for all AFI/SAFI included in the peer's GR capability";
                    }

                    leaf forwarding-bits-set {
                        type enumeration {
                            enum "none"                         { value 0; }
                            enum "all"                          { value 1; }
                            enum "non-fwd"                      { value 2; }
                        }
                        default "none";
                        description "BGP LLGR forwarding bit behavior for F bit in AFI or SAFI";
                    }

                    leaf advertise-stale-to-all-neighbors {
                        type boolean;
                        default "false";
                        description "Advertise BGP routes marked as LLGR stale to BGP peers";
                    }

                    leaf without-no-export {
                        type boolean;
                        default "false";
                        description "Allow LLGR stale routes to be advertised to any peer that did not signal the LLGR capability";
                    }

                    list family {
                        key "family-type";
                        description "Enter the family context";

                        leaf family-type {
                            type types-bgp:llgr-family-identifiers;
                            description "Address family type for LLGR";
                        }

                        leaf advertised-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            default "86400";
                            description "Long-lived stale time that is advertised by router in its LLGR capability";
                        }

                        leaf helper-override-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            description "Locally-imposed LLGR stale time";
                        }

                    } // list family

                } // container long-lived

            } // container graceful-restart

            container optimal-route-reflection {
                description "Enter the optimal-route-reflection context";

                container spf-wait {
                    description "Enter the spf-wait context";

                    leaf max-wait {
                        type uint32 {
                            range "1..600";
                        }
                        default "60";
                        description "Maximum interval between two consecutive SPF calculations";
                    }

                    leaf initial-wait {
                        type uint32 {
                            range "1..300";
                        }
                        default "5";
                        description "Initial hold off time before initiating an SPF to calculate cost from optimal route reflection location";
                    }

                    leaf second-wait {
                        type uint32 {
                            range "1..300";
                        }
                        default "15";
                        description "Additional hold off time between first and second SPF calculations";
                    }

                } // container spf-wait

                list location {
                    key "location-id";
                    description "Enter the location context";

                    leaf location-id {
                        type uint32 {
                            range "1..16";
                        }
                        description "Optimal route reflection location";
                    }

                    leaf primary-ip-address {
                        type types-sros:ipv4-unicast-address;
                        description "Preferred IPv4 address to calculate ORR cost from location associated to BGP next hop";
                    }

                    leaf secondary-ip-address {
                        type types-sros:ipv4-unicast-address;
                        description "Second preferred IP address to calculate ORR cost from location associated to BGP next hop";
                    }

                    leaf tertiary-ip-address {
                        type types-sros:ipv4-unicast-address;
                        description "Third preferred IP address to calculate ORR cost from location associated to BGP next hop";
                    }

                    leaf primary-ipv6-address {
                        type types-sros:ipv6-unicast-address;
                        description
                            "Specifies the preferred IPv6 address to calculate the optimal-route-reflection
                             cost from the associated location to a bgp next-hop.";
                    }

                    leaf secondary-ipv6-address {
                        type types-sros:ipv6-unicast-address;
                        description
                            "Specifies the second preferred IPv6 address to calculate the optimal-route-reflection
                             cost from the associated location to a bgp next-hop.";
                    }

                    leaf tertiary-ipv6-address {
                        type types-sros:ipv6-unicast-address;
                        description
                            "Specifies the third preferred IPv6 address to calculate the optimal-route-reflection
                             cost from the associated location to a bgp next-hop.";
                    }

                } // list location

            } // container optimal-route-reflection

            container next-hop-resolution {
                description "Enter the next-hop-resolution context";

                leaf use-bgp-routes {
                    type boolean;
                    default "false";
                    description "Use BGP routes to recursively resolve BGP next-hop of unlabeled IPv4 and unlabeled IPv6 routes";
                }

                leaf weighted-ecmp {
                    type boolean;
                    default "false";
                    description "Allow weighted ECMP for next-hop tunnel selection for 6PE";
                }

                leaf policy {
                    type types-sros:named-item-64;
                    description "Policy that controls which IP routes are eligible to resolve BGP next hop addresses";
                }

                container shortcut-tunnel {
                    description "Enter the shortcut-tunnel context";

                    list family {
                        key "family-type";
                        description "Enter the family context";

                        leaf family-type {
                            type enumeration {
                                enum "ipv4"                         { value 1; }
                                enum "ipv6"                         { value 3; }
                            }
                            description "Address family type for shortcut tunnel selection";
                        }

                        leaf resolution {
                            type enumeration {
                                enum "none"                         { value 0; }
                                enum "filter"                       { value 1; }
                                enum "any"                          { value 2; }
                            }
                            default "none";
                            description "Resolution state of BGP unlabeled routes to tunnels";
                        }

                        leaf disallow-igp {
                            type boolean;
                            default "false";
                            description "Do not resolve BGP routes using IGP next-hops in RTM if no tunnel next-hops found in TTM";
                        }

                        leaf enforce-strict-tunnel-tagging {
                            type boolean;
                            default "false";
                            description "Consider only LSPs marked with an admin-tag for next-hop resolution";
                        }

                        container resolution-filter {
                            description "Enter the resolution-filter context";

                            leaf bgp {
                                type boolean;
                                default "false";
                                description "Use BGP tunneling for next-hop resolution";
                            }

                            leaf ldp {
                                type boolean;
                                default "false";
                                description "Use LDP tunneling for next-hop resolution";
                            }

                            leaf rsvp {
                                type boolean;
                                default "false";
                                description "Use RSVP tunneling for next-hop resolution";
                            }

                            leaf sr-isis {
                                type boolean;
                                default "false";
                                description "Use SR ISIS tunneling for next-hop resolution";
                            }

                            leaf sr-ospf {
                                type boolean;
                                default "false";
                                description "Use SR OSPF tunneling for next-hop resolution";
                            }

                            leaf sr-te {
                                type boolean;
                                default "false";
                                description "Use SR traffic engineering for next-hop resolution";
                            }

                            leaf sr-policy {
                                type boolean;
                                default "false";
                                description "Use SR policies for next-hop resolution";
                            }

                            leaf rib-api {
                                type boolean;
                                default "false";
                                description "Use rib-api tunnel for next hop resolution.";
                            }

                            leaf mpls-fwd-policy {
                                type boolean;
                                default "false";
                                description "Use Mpls Forwarding Policy for next hop resolution.";
                            }

                            leaf sr-ospf3 {
                                type boolean;
                                default "false";
                                description "Use segment routing ospf3 for next hop resolution.";
                            }

                        } // container resolution-filter

                    } // list family

                } // container shortcut-tunnel

                container labeled-routes {
                    description "Enter the labeled-routes context";

                    leaf allow-static {
                        type boolean;
                        default "false";
                        description "Allow static routes to resolve BGP next-hop of label-IPv4/IPv6 and VPN-IPv4/IPv6 routes from peer";
                    }

                    leaf rr-use-route-table {
                        type boolean;
                        default "false";
                        description "RTM resolution of BGP next hop for labeled routes if TTM resolution fails";
                    }

                    container transport-tunnel {
                        description "Enter the transport-tunnel context";

                        list family {
                            key "family-type";
                            description "Enter the family context";

                            leaf family-type {
                                type enumeration {
                                    enum "vpn"                          { value 2; }
                                    enum "label-ipv4"                   { value 17; }
                                    enum "label-ipv6"                   { value 18; }
                                }
                                description "Address family type for configuring next-hop resolution of BGP label routes";
                            }

                            leaf resolution {
                                type enumeration {
                                    enum "none"                         { value 0; }
                                    enum "filter"                       { value 1; }
                                    enum "any"                          { value 2; }
                                }
                                default "filter";
                                description "Resolution state of BGP unlabeled routes to tunnels";
                            }

                            leaf enforce-strict-tunnel-tagging {
                                type boolean;
                                default "false";
                                description "Consider only LSPs marked with an admin-tag for next-hop resolution";
                            }

                            container resolution-filter {
                                description "Enter the resolution-filter context";

                                leaf bgp {
                                    type boolean;
                                    description "Use BGP tunneling for next-hop resolution";
                                }

                                leaf ldp {
                                    type boolean;
                                    default "true";
                                    description "Use LDP tunneling for next-hop resolution";
                                }

                                leaf rsvp {
                                    type boolean;
                                    default "false";
                                    description "Use RSVP tunneling for next-hop resolution";
                                }

                                leaf sr-isis {
                                    type boolean;
                                    default "false";
                                    description "Use SR ISIS tunneling for next-hop resolution";
                                }

                                leaf sr-ospf {
                                    type boolean;
                                    default "false";
                                    description "Use SR OSPF tunneling for next-hop resolution";
                                }

                                leaf sr-te {
                                    type boolean;
                                    default "false";
                                    description "Use SR traffic engineering for next-hop resolution";
                                }

                                leaf udp {
                                    type boolean;
                                    default "false";
                                    description "Use UDP for next-hop resolution";
                                }

                                leaf sr-policy {
                                    type boolean;
                                    default "false";
                                    description "Use SR policies for next-hop resolution";
                                }

                                leaf rib-api {
                                    type boolean;
                                    default "false";
                                    description "Use rib-api tunnel for next hop resolution.";
                                }

                                leaf mpls-fwd-policy {
                                    type boolean;
                                    default "false";
                                    description "Use Mpls Forwarding Policy for next hop resolution.";
                                }

                                leaf sr-ospf3 {
                                    type boolean;
                                    default "false";
                                    description "Use sr-ospf3 for next hop resolution.";
                                }

                            } // container resolution-filter

                        } // list family

                    } // container transport-tunnel

                } // container labeled-routes

            } // container next-hop-resolution

            container multipath {
                description "Multipath configuration for the base router bgp instance.";

                leaf max-paths {
                    type types-router:ip-ecmp;
                    default "1";
                    description "Attribute max-paths for multipath.";
                }

                leaf ebgp {
                    type types-router:ip-ecmp;
                    description "Attribute ebgp-max-paths for multipath.";
                }

                leaf ibgp {
                    type types-router:ip-ecmp;
                    description "Attribute ibgp-max-paths for multipath.";
                }

                leaf restrict {
                    type types-bgp:restrict;
                    default "same-as-path-length";
                    description "Attribute as-path restriction for multipath.";
                }

                leaf unequal-cost {
                    type boolean;
                    default "false";
                    description "Attribute unequal next-hop cost for multipath.";
                }

                list family {
                    key "family-type";
                    description "Each item represents a bgp address family in the instance.";

                    leaf family-type {
                        type enumeration {
                            enum "ipv4"                         { value 1; }
                            enum "ipv6"                         { value 3; }
                            enum "label-ipv4"                   { value 17; }
                            enum "label-ipv6"                   { value 18; }
                        }
                        description
                            "Specifies the address family for which the
                             multipath selection applies.";
                    }

                    leaf max-paths {
                        type types-router:ip-ecmp;
                        description "Attribute max-paths for multipath.";
                    }

                    leaf ebgp {
                        type types-router:ip-ecmp;
                        description "Attribute ebgp-max-paths for multipath.";
                    }

                    leaf ibgp {
                        type types-router:ip-ecmp;
                        description "Attribute ibgp-max-paths for multipath.";
                    }

                    leaf restrict {
                        type types-bgp:restrict;
                        default "same-as-path-length";
                        description "Attribute as-path restriction for multipath.";
                    }

                    leaf unequal-cost {
                        type boolean;
                        default "false";
                        description "Attribute unequal next-hop cost for multipath.";
                    }

                } // list family

            } // container multipath

            list route-target-list {
                key "community-name";
                description "Enter the route-target-list context";

                leaf community-name {
                    type types-sros:named-item;
                    description "Extended community name that is accepted by route reflector server, or advertised by router";
                }

            } // list route-target-list

            container outbound-route-filtering {
                presence "Enable/disable outbound route filtering.";
                description "Enter the outbound-route-filtering context";

                container extended-community {
                    presence "Enable/disable outbound route filtering using extended communities.";
                    description "Enter the extended-community context";

                    leaf accept-orf {
                        type boolean;
                        default "false";
                        description "Negotiate BGP ORF receive capabilities with peer";
                    }

                    container send-orf {
                        presence "Add/Remove members to the send ORF list.";
                        description "Enter the send-orf context";

                        list route-target {
                            key "community-name";
                            description "Enter the route-target context";

                            leaf community-name {
                                type types-sros:named-item;
                                description "Extended community name that is accepted by route reflector server, or advertised by router";
                            }

                        } // list route-target

                    } // container send-orf

                } // container extended-community

            } // container outbound-route-filtering

            container monitor {
                presence "Contains all the BMP related configuration for a bgp-instance.";
                description "Enter the monitor context";

                leaf all-stations {
                    type boolean;
                    default "false";
                    description "Use all BMP monitoring stations";
                }

                leaf admin-state {
                    type types-sros:admin-state;
                    default "disable";
                    description "Administrative state of BMP monitoring";
                }

                container route-monitoring {
                    description "Enter the route-monitoring context";

                    leaf pre-policy {
                        type boolean;
                        default "false";
                        description "Send pre-policy route monitoring messages";
                    }

                    leaf post-policy {
                        type boolean;
                        default "false";
                        description "Send post-policy monitoring messages";
                    }

                } // container route-monitoring

                list station {
                    key "station-name";
                    max-elements 8;
                    description "Enter the station context";

                    leaf station-name {
                        type leafref {
                            path "../../../../../bmp/station/name";
                        }
                        description "BMP monitoring station";
                    }

                } // list station

            } // container monitor

            container rib-management {
                description "Enter the rib-management context";

                container ipv4 {
                    description "Enter the ipv4 context";

                    container route-table-import {
                        description "Enter the route-table-import context";

                        leaf policy-name {
                            type types-sros:named-item-64;
                            description "Policy that controls the importation of active routes from IP route table into one of BGP RIBs";
                        }

                    } // container route-table-import

                    container leak-import {
                        description "Enter the leak-import context";

                        leaf-list policy {
                            type string {
                                length "1..255";
                                pattern "(.{1,64})|(.*[\\[].*)" {
                                    error-message "Policy name too long or expression not valid";
                                }
                            }
                            max-elements 15;
                            ordered-by user;
                            description "Leak import policy name";
                        }

                    } // container leak-import

                } // container ipv4

                container ipv6 {
                    description "Enter the ipv6 context";

                    container route-table-import {
                        description "Enter the route-table-import context";

                        leaf policy-name {
                            type types-sros:named-item-64;
                            description "Policy that controls the importation of active routes from IP route table into one of BGP RIBs";
                        }

                    } // container route-table-import

                    container leak-import {
                        description "Enter the leak-import context";

                        leaf-list policy {
                            type string {
                                length "1..255";
                                pattern "(.{1,64})|(.*[\\[].*)" {
                                    error-message "Policy name too long or expression not valid";
                                }
                            }
                            max-elements 15;
                            ordered-by user;
                            description "Leak import policy name";
                        }

                    } // container leak-import

                } // container ipv6

                container label-ipv4 {
                    description "Enter the label-ipv4 context";

                    container route-table-import {
                        description "Enter the route-table-import context";

                        leaf policy-name {
                            type types-sros:named-item-64;
                            description "Policy that controls the importation of active routes from IP route table into one of BGP RIBs";
                        }

                    } // container route-table-import

                    container leak-import {
                        description "Enter the leak-import context";

                        leaf-list policy {
                            type string {
                                length "1..255";
                                pattern "(.{1,64})|(.*[\\[].*)" {
                                    error-message "Policy name too long or expression not valid";
                                }
                            }
                            max-elements 15;
                            ordered-by user;
                            description "Leak import policy name";
                        }

                    } // container leak-import

                } // container label-ipv4

                container label-ipv6 {
                    description "Enter the label-ipv6 context";

                    container route-table-import {
                        description "Enter the route-table-import context";

                        leaf policy-name {
                            type types-sros:named-item-64;
                            description "Policy that controls the importation of active routes from IP route table into one of BGP RIBs";
                        }

                    } // container route-table-import

                } // container label-ipv6

            } // container rib-management

            list group {
                key "group-name";
                description "Enter the group context";

                leaf group-name {
                    type types-sros:named-item;
                    description "BGP peer group";
                }

                leaf description {
                    type types-sros:description;
                    description "Text description";
                }

                leaf connect-retry {
                    type int32 {
                        range "1..65535";
                    }
                    description "BGP connect retry timer value";
                }

                leaf admin-state {
                    type types-sros:admin-state;
                    default "enable";
                    description "Administrative state of BGP group";
                }

                leaf static-group {
                    type boolean;
                    default "true";
                    description "Use group for static peers";
                }

                leaf keepalive {
                    type int32 {
                        range "0..21845";
                    }
                    description "Time after which the keepalive message is sent";
                }

                leaf damping {
                    type boolean;
                    description "Use BGP route damping for learned routes defined within the route policy";
                }

                leaf local-preference {
                    type int64 {
                        range "0..4294967295";
                    }
                    description "Default value for local preference attribute if not specified in incoming routes";
                }

                leaf loop-detect {
                    type types-bgp:loop-detect;
                    description "Loop detection strategy in AS path";
                }

                leaf loop-detect-threshold {
                    type uint32 {
                        range "0..15";
                    }
                    description "Configure the limit for the number of times global ASN appears in a received AS path&.";
                }

                leaf min-route-advertisement {
                    type int16 {
                        range "1..255";
                    }
                    description "Minimum interval between successive updates of prefix toward peer";
                }

                leaf aggregator-id-zero {
                    type boolean;
                    description "Set router ID in aggregator path attribute to zero when BGP aggregates routes";
                }

                leaf preference {
                    type uint32 {
                        range "1..255";
                    }
                    description "Route preference for routes learned from all peers";
                }

                leaf multihop {
                    type int32 {
                        range "1..255";
                    }
                    description "TTL value in the IP header of packets sent to a peer";
                }

                leaf med-out {
                    type union {
                        type uint32;
                        type enumeration {
                            enum "igp-cost"                     { value -1; }
                        }
                    }
                    description "Multi-Exit Discriminator (MED) identifier";
                }

                leaf authentication-key {
                    type types-sros:encrypted-leaf {
                        length "1..370";
                    }
                    description "Configure the BGP authentication key for all peers.";
                }

                leaf client-reflect {
                    type boolean;
                    description "Enable client reflection of routes by the route reflector";
                }

                leaf vpn-apply-export {
                    type boolean;
                    description "Apply base instance BGP export route policies to BGP VPN routes";
                }

                leaf vpn-apply-import {
                    type boolean;
                    description "Apply base instance BGP import route policies to BGP VPN routes";
                }

                leaf asn-4-byte {
                    type boolean;
                    description "Allow use of 4-byte ASNs";
                }

                leaf path-mtu-discovery {
                    type boolean;
                    description "Allow path MTU discovery for associated TCP connections";
                }

                leaf next-hop-self {
                    type boolean;
                    default "false";
                    description "Advertise routes to peer using next hop path attribute set to itself";
                }

                leaf passive {
                    type boolean;
                    default "false";
                    description "Enable passive mode for BGP group";
                }

                leaf type {
                    type types-bgp:peer-type;
                    default "no-type";
                    description "BGP peer type";
                }

                leaf peer-as {
                    type uint32 {
                        range "1..4294967295";
                    }
                    description "AS number for all remote peers in group";
                }

                leaf capability-negotiation {
                    type boolean;
                    default "true";
                    description "Enable capability negotiation";
                }

                leaf enforce-first-as {
                    type boolean;
                    description "Compare most recent ASN in AS_PATH attribute of each route to configured peer AS of session for match";
                }

                leaf initial-send-delay-zero {
                    type boolean;
                    description "Bypass minimum route advertisement interval and send BGP updates as soon as session comes up";
                }

                leaf local-address {
                    type types-bgp:local-address;
                    description "Local IP address used by group when communicating with BGP peers";
                }

                leaf ttl-security {
                    type uint32 {
                        range "1..255";
                    }
                    description "Minimum TTL value for incoming BGP packet";
                }

                leaf default-route-target {
                    type boolean;
                    default "false";
                    description "Send default RTC route to peers in BGP peer group";
                }

                leaf aigp {
                    type boolean;
                    default "false";
                    description "Add Accumalated IGP (AIGP) attribute to advertised routes";
                }

                leaf advertise-inactive {
                    type boolean;
                    description "Advertise inactive BGP routes to other BGP peers";
                }

                leaf authentication-keychain {
                    type leafref {
                        path "../../../../system/security/keychains/keychain/keychain-name";
                    }
                    description
                        "The value specifies the keychain which will be used to
                         sign and/or authenticate the BGP protocol stream.";
                }

                leaf bfd-liveness {
                    type boolean;
                    description "Use Bidirectional Forwarding Detection";
                }

                leaf fast-external-failover {
                    type boolean;
                    description
                        "Specifies whether the router should drop an external
                         BGP session immediately when the local interface goes
                         down, or whether the BGP session should be kept up until
                         the holdtime expires.";
                }

                leaf peer-ip-tracking {
                    type boolean;
                    description "Allow BGP peer tracking";
                }

                leaf dynamic-neighbor-limit {
                    type uint32 {
                        range "1..8192";
                    }
                    description "Dynamic peer limit for BGP instance";
                }

                leaf split-horizon {
                    type boolean;
                    description "Prevent routes from being reflected back to peer that sends best route";
                }

                leaf third-party-nexthop {
                    type boolean;
                    description "Send third party next hop to EBGP peers in same subnet as source peer";
                }

                leaf label-preference {
                    type uint32 {
                        range "1..255";
                    }
                    description "Route preference for routes learned from labeled unicast peers";
                }

                leaf def-recv-evpn-encap {
                    type types-bgp:encap;
                    description "Default encapsulation type when EVPN route is received without BGP encapsulation extended community";
                }

                leaf multipath-eligible {
                    type boolean;
                    default "false";
                    description
                        "Specifies if routes from peers in this group are eligible
                         for multipath.";
                }

                leaf-list apply-groups {
                    type leafref {
                        path "../../../../groups/group/name";
                    }
                    max-elements 8;
                    ordered-by user;
                    description "Apply a configuration group at this level";
                }

                container hold-time {
                    description "Enter the hold-time context";

                    leaf seconds {
                        type int32 {
                            range "0|3..65535";
                        }
                        description "BGP hold time";
                    }

                    leaf minimum-hold-time {
                        type int32 {
                            range "0|3..65536";
                        }
                        default "0";
                        description "Minimum hold time that is strictly enforced";
                    }

                } // container hold-time

                container family {
                    presence "Configure family for BGP";
                    description "Enter the family context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Support IPv4 address family";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv4 address family";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Support IPv6 address family";
                    }

                    leaf mcast-ipv4 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv4 address family";
                    }

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv6 address family";
                    }

                    leaf l2-vpn {
                        type boolean;
                        default "false";
                        description "Support L2 VPN address family";
                    }

                    leaf mvpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv4 address family";
                    }

                    leaf mdt-safi {
                        type boolean;
                        default "false";
                        description "Support Multicast Distribution Tree (MDT) SAFI address family";
                    }

                    leaf ms-pw {
                        type boolean;
                        default "false";
                        description "Support multi-segment pseudowire address family";
                    }

                    leaf flow-ipv4 {
                        type boolean;
                        default "false";
                        description "Support flowspec IPv4 address family";
                    }

                    leaf route-target {
                        type boolean;
                        default "false";
                        description "Support address family for RT constrain routes";
                    }

                    leaf mcast-vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support multicast VPN IPv4 address family";
                    }

                    leaf mvpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv6 address family";
                    }

                    leaf flow-ipv6 {
                        type boolean;
                        default "false";
                        description "Support flowspec IPv6 address family";
                    }

                    leaf evpn {
                        type boolean;
                        default "false";
                        description "Support EVPN address family";
                    }

                    leaf mcast-ipv6 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv6 address family";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv4 address family";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv6 address family";
                    }

                    leaf bgp-ls {
                        type boolean;
                        default "false";
                        description "Support BGP-LS address family";
                    }

                    leaf mcast-vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support multicast VPN IPv6 address family";
                    }

                    leaf sr-policy-ipv4 {
                        type boolean;
                        default "false";
                        description "Advertise capability for AFI1/SAFI73, BGP routes that encode an SR policy to an IPv4 destination";
                    }

                } // container family

                container default-preference {
                    description "Configure the route preference for ebgp and ibgp routes.";

                    leaf ebgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ebgp.";
                    }

                    leaf ibgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ibgp.";
                    }

                } // container default-preference

                container default-label-preference {
                    description "Configure the route label preference for ebgp and ibgp routes.";

                    leaf ebgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ebgp.";
                    }

                    leaf ibgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ibgp.";
                    }

                } // container default-label-preference

                container remove-private {
                    presence "Remove private AS numbers from the AS Path before advertising to a peer";
                    description "Enter the remove-private context";

                    leaf limited {
                        type boolean;
                        default "false";
                        description "Remove private AS numbers up to first public ASN encountered";
                    }

                    leaf skip-peer-as {
                        type boolean;
                        default "false";
                        description "Keep a private ASN in the AS path if that ASN is the same as the BGP peer ASN";
                    }

                } // container remove-private

                container cluster {
                    description "Enter the cluster context";

                    leaf cluster-id {
                        type types-sros:ipv4-address;
                        description "Cluster ID for route reflector server";
                    }

                    leaf orr-location {
                        type uint32 {
                            range "1..16";
                        }
                        description "Optimal route reflection location for cluster ID";
                    }

                    leaf allow-local-fallback {
                        type boolean;
                        default "false";
                        description "Allow fallback to RR default location when no BGP routes reachable from  ORR location";
                    }

                } // container cluster

                container ebgp-default-reject-policy {
                    presence "Configure default reject behavior for BGP";
                    description
                        "Configure the BGP default policy for routes received from or advertised
                         to external peers.";

                    leaf import {
                        type boolean;
                        default "true";
                        description "Enable/disable default reject import policy for external peers.";
                    }

                    leaf export {
                        type boolean;
                        default "true";
                        description "Enable/disable default reject export policy for external peers.";
                    }

                } // container ebgp-default-reject-policy

                container local-as {
                    description "Enter the local-as context";

                    leaf as-number {
                        type uint32 {
                            range "1..4294967295";
                        }
                        description "BGP AS number";
                    }

                    leaf private {
                        type boolean;
                        default "false";
                        description "Hide local AS number in paths learned from peering";
                    }

                    leaf prepend-global-as {
                        type boolean;
                        default "true";
                        description "Prepend global AS number when advertising routes to EBGP peer";
                    }

                } // container local-as

                container next-hop-unchanged {
                    description "Enter the next-hop-unchanged context";

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Send labeled IPv4 routes to peers with unchanged BGP next-hops";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Send labeled IPv6 routes to peers with unchanged BGP next-hops";
                    }

                } // container next-hop-unchanged

                container origin-validation {
                    description "Enter the origin-validation context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Support unlabeled unicast IPv4 routes";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv6.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label-ipv4.";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label-ipv6.";
                    }

                } // container origin-validation

                container link-bandwidth {
                    description "Enter the link-bandwidth context";

                    container accept-from-ebgp {
                        description "Enter the accept-from-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container accept-from-ebgp

                    container add-to-received-ebgp {
                        description "Enter the add-to-received-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container add-to-received-ebgp

                    container aggregate-used-paths {
                        description "Enter the aggregate-used-paths context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container aggregate-used-paths

                    container send-to-ebgp {
                        description "Enter the send-to-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container send-to-ebgp

                } // container link-bandwidth

                container send-communities {
                    description "Enter the send-communities context";

                    leaf standard {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for non-external communities.";
                    }

                    leaf extended {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for external communities.";
                    }

                    leaf large {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for large communities.";
                    }

                } // container send-communities

                container error-handling {
                    description "Enter the error-handling context";

                    leaf update-fault-tolerance {
                        type boolean;
                        description "Consider non-critical errors as treat-as-withdraw and do not trigger session reset";
                    }

                } // container error-handling

                container damp-peer-oscillations {
                    presence "Timers settings for damp-peer-oscillation";
                    description "Enter the damp-peer-oscillations context";

                    leaf error-interval {
                        type uint32 {
                            range "0..2048";
                        }
                        default "30";
                        description "Error free interval after session reset, to return idle-hold-time to initial-wait";
                    }

                    container idle-hold-time {
                        description "Enter the idle-hold-time context";

                        leaf initial-wait {
                            type uint32 {
                                range "0..2048";
                            }
                            default "0";
                            description "Time a session remains in idle state after session stabilized";
                        }

                        leaf second-wait {
                            type uint32 {
                                range "1..2048";
                            }
                            default "5";
                            description "Time that doubles after each session failure within relatively short time";
                        }

                        leaf max-wait {
                            type uint32 {
                                range "1..2048";
                            }
                            default "60";
                            description "Maximum session idle time after repeated instability";
                        }

                    } // container idle-hold-time

                } // container damp-peer-oscillations

                container add-paths {
                    presence "Famly settings for add-paths";
                    description "Enter the add-paths context";

                    container ipv4 {
                        description "Enter the ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per unlabeled IPv4 unicast prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple unlabeled unicast routes per IPv4 prefix";
                        }

                    } // container ipv4

                    container ipv6 {
                        description "Enter the ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per unlabeled unicast IPv6 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple unlabeled unicast routes per IPv6 prefix";
                        }

                    } // container ipv6

                    container label-ipv4 {
                        description "Enter the label-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per labeled-unicast IPv4  prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple labeled-unicast routes per IPv4 prefix";
                        }

                    } // container label-ipv4

                    container label-ipv6 {
                        description "Enter the label-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per labeled-unicast IPv6  prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple labeled-unicast routes per IPv6 prefix";
                        }

                    } // container label-ipv6

                    container vpn-ipv4 {
                        description "Enter the vpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per VPN-IPv4 NLRI that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive VPN-IPv4 routes";
                        }

                    } // container vpn-ipv4

                    container vpn-ipv6 {
                        description "Enter the vpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per VPN-IPv6 NLRI that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple VPN-IPv6 routes";
                        }

                    } // container vpn-ipv6

                    container mvpn-ipv4 {
                        description "Enter the mvpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast VPN routes per IPv4 prefix";
                        }

                    } // container mvpn-ipv4

                    container mvpn-ipv6 {
                        description "Enter the mvpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv6 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                        }

                    } // container mvpn-ipv6

                    container mcast-vpn-ipv4 {
                        description "Enter the mcast-vpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv4 VPN prefix";
                        }

                    } // container mcast-vpn-ipv4

                    container mcast-vpn-ipv6 {
                        description "Enter the mcast-vpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast IPv6 VPN prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                        }

                    } // container mcast-vpn-ipv6

                } // container add-paths

                container import {
                    presence "Enables bgp import polices at the group level";
                    description "Enter the import context";

                    leaf-list policy {
                        type string {
                            length "1..255";
                            pattern "(.{1,64})|(.*[\\[].*)" {
                                error-message "Policy name too long or expression not valid";
                            }
                        }
                        min-elements 1;
                        max-elements 15;
                        ordered-by user;
                        description "Import policy name";
                    }

                } // container import

                container export {
                    presence "Enables bgp export polices at the group level";
                    description "Enter the export context";

                    leaf-list policy {
                        type string {
                            length "1..255";
                            pattern "(.{1,64})|(.*[\\[].*)" {
                                error-message "Policy name too long or expression not valid";
                            }
                        }
                        min-elements 1;
                        max-elements 15;
                        ordered-by user;
                        description "Import policy name";
                    }

                } // container export

                container extended-nh-encoding {
                    presence
                        "families the Bgp instance is configured
                         to support extended next-hop encoding.";
                    description "Enter the extended-nh-encoding context";

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv4.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv4.";
                    }

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv4.";
                    }

                } // container extended-nh-encoding

                container advertise-ipv6-next-hops {
                    presence "families extended next-hop encoding is supported for.";
                    description "Enter the advertise-ipv6-next-hops context";

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv6.";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv6.";
                    }

                    leaf evpn {
                        type boolean;
                        default "false";
                        description "Enable/disable family type evpn.";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv4.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv4.";
                    }

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv4.";
                    }

                } // container advertise-ipv6-next-hops

                container graceful-restart {
                    presence "Enable/disable graceful-restart for all BGP group.";
                    description "Enter the graceful-restart context";

                    leaf restart-time {
                        type uint32 {
                            range "0..4095";
                        }
                        default "300";
                        description "BGP graceful restart time";
                    }

                    leaf stale-routes-time {
                        type uint32 {
                            range "1..3600";
                        }
                        default "360";
                        description "Maximum time that stale routes maintain after graceful restart is initiated";
                    }

                    leaf gr-notification {
                        type boolean;
                        default "false";
                        description "Enable graceful restart capability indicating support for NOTIFICATION messages";
                    }

                    container long-lived {
                        presence "Long Lived Graceful restart attributes for all BGP group.";
                        description "Enter the long-lived context";

                        leaf advertised-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            default "86400";
                            description "Long-lived stale time that is advertised by router in its LLGR capability";
                        }

                        leaf helper-override-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            description "Locally-imposed LLGR stale time";
                        }

                        leaf helper-override-restart-time {
                            type uint32 {
                                range "0..4095";
                            }
                            description "Locally-imposed restart time for all AFI/SAFI included in the peer's GR capability";
                        }

                        leaf forwarding-bits-set {
                            type enumeration {
                                enum "none"                         { value 0; }
                                enum "all"                          { value 1; }
                                enum "non-fwd"                      { value 2; }
                            }
                            default "none";
                            description "BGP LLGR forwarding bit behavior for F bit in AFI or SAFI";
                        }

                        leaf advertise-stale-to-all-neighbors {
                            type boolean;
                            default "false";
                            description "Advertise BGP routes marked as LLGR stale to BGP peers";
                        }

                        leaf without-no-export {
                            type boolean;
                            default "false";
                            description "Allow LLGR stale routes to be advertised to any peer that did not signal the LLGR capability";
                        }

                        list family {
                            key "family-type";
                            description "Enter the family context";

                            leaf family-type {
                                type types-bgp:llgr-family-identifiers;
                                description "Address family type for LLGR";
                            }

                            leaf advertised-stale-time {
                                type uint32 {
                                    range "0..16777215";
                                }
                                default "86400";
                                description "Long-lived stale time that is advertised by router in its LLGR capability";
                            }

                            leaf helper-override-stale-time {
                                type uint32 {
                                    range "0..16777216";
                                }
                                default "16777216";
                                description "Locally-imposed LLGR stale time";
                            }

                        } // list family

                    } // container long-lived

                } // container graceful-restart

                container outbound-route-filtering {
                    presence "Enable/disable outbound route filtering for the group.";
                    description "Enter the outbound-route-filtering context";

                    container extended-community {
                        presence "Enable/disable outbound route filtering using extended communities.";
                        description "Enter the extended-community context";

                        leaf accept-orf {
                            type boolean;
                            description "Negotiate BGP ORF receive capabilities with peer";
                        }

                        container send-orf {
                            presence "Add/remove members to the send ORF list.";
                            description "Enter the send-orf context";

                            list route-target {
                                key "community-name";
                                description "Enter the route-target context";

                                leaf community-name {
                                    type types-sros:named-item;
                                    description "Extended community name that is accepted by route reflector server, or advertised by router";
                                }

                            } // list route-target

                        } // container send-orf

                    } // container extended-community

                } // container outbound-route-filtering

                list prefix-limit {
                    key "family";
                    description "Enter the prefix-limit context";

                    leaf family {
                        type types-bgp:ip-family-identifier;
                        description "Address family to which the limit applies";
                    }

                    leaf maximum {
                        type uint32 {
                            range "1..4294967295";
                        }
                        mandatory true;
                        description "Specifies the maximum number of routes that can be learned from this peer.";
                    }

                    leaf log-only {
                        type boolean;
                        default "false";
                        description "Send warning message if specified threshold or limit is reached, without disabling BGP peer session";
                    }

                    leaf threshold {
                        type uint32 {
                            range "1..100";
                        }
                        default "90";
                        description "Threshold value that triggers a warning message";
                    }

                    leaf idle-timeout {
                        type int32 {
                            range "1..1024";
                        }
                        description "Time that BGP peering remains idle before reconnecting to peers";
                    }

                    leaf post-import {
                        type boolean;
                        default "false";
                        description "Apply prefix limit only to number of routes accepted by import policies";
                    }

                    leaf-list apply-groups {
                        type leafref {
                            path "../../../../../groups/group/name";
                        }
                        max-elements 8;
                        ordered-by user;
                        description "Apply a configuration group at this level";
                    }

                } // list prefix-limit

                container dynamic-neighbor {
                    description "Enter the dynamic-neighbor context";

                    container match {

                        list prefix {
                            key "ip-prefix";

                            leaf ip-prefix {
                                type types-sros:ip-prefix;
                                description "Prefix for dynamic BGP sessions in peer group";
                            }

                            leaf-list allowed-peer-as {
                                type string {
                                    pattern "(([1-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[0-1][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[0-1][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]))|(([1-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[0-1][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[0-1][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])\\.\\.([1-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[0-1][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[0-1][0-9]{2}|42949672[0-8][0-9]|429496729[0-5]))";
                                }
                                max-elements 32;
                                ordered-by user;
                                description "Allowed peer AS range";
                            }

                        } // list prefix

                    } // container match

                } // container dynamic-neighbor

                container monitor {
                    presence "Contains all the BMP related configuration for a bgp-group.";
                    description "Enter the monitor context";

                    leaf all-stations {
                        type boolean;
                        default "false";
                        description "Use all BMP monitoring stations";
                    }

                    leaf admin-state {
                        type types-sros:admin-state;
                        default "disable";
                        description "Administrative state of BMP monitoring";
                    }

                    container route-monitoring {
                        description "Enter the route-monitoring context";

                        leaf pre-policy {
                            type boolean;
                            default "false";
                            description "Send pre-policy route monitoring messages";
                        }

                        leaf post-policy {
                            type boolean;
                            default "false";
                            description "Send post-policy monitoring messages";
                        }

                    } // container route-monitoring

                    list station {
                        key "station-name";
                        max-elements 8;
                        description "Enter the station context";

                        leaf station-name {
                            type leafref {
                                path "../../../../../../bmp/station/name";
                            }
                            description "BMP monitoring station";
                        }

                    } // list station

                } // container monitor

            } // list group

            list neighbor {
                key "ip-address";
                description "Enter the neighbor context";

                leaf ip-address {
                    type types-sros:ip-address-with-zone;
                    description "BGP group neighbor";
                }

                leaf advertise-ldp-prefix {
                    type boolean;
                    default "false";
                    description "Advertise all activated LDP FEC prefixes to BGP peer";
                }

                leaf ttl-security {
                    type uint32 {
                        range "1..255";
                    }
                    description "Minimum TTL value for incoming BGP packet";
                }

                leaf default-route-target {
                    type boolean;
                    description "Send default RTC route to peers in BGP peer group";
                }

                leaf aigp {
                    type boolean;
                    description "Add Accumalated IGP (AIGP) attribute to advertised routes";
                }

                leaf advertise-inactive {
                    type boolean;
                    description "Advertise inactive BGP routes to other BGP peers";
                }

                leaf authentication-keychain {
                    type leafref {
                        path "../../../../system/security/keychains/keychain/keychain-name";
                    }
                    description
                        "The value specifies the keychain which will be used to
                         sign and/or authenticate the BGP protocol stream.";
                }

                leaf bfd-liveness {
                    type boolean;
                    description "Use Bidirectional Forwarding Detection";
                }

                leaf fast-external-failover {
                    type boolean;
                    description
                        "Specifies whether the router should drop an external
                         BGP session immediately when the local interface goes
                         down, or whether the BGP session should be kept up until
                         the holdtime expires.";
                }

                leaf peer-ip-tracking {
                    type boolean;
                    description "Allow BGP peer tracking";
                }

                leaf split-horizon {
                    type boolean;
                    description "Prevent routes from being reflected back to peer that sends best route (true)";
                }

                leaf third-party-nexthop {
                    type boolean;
                    description "Send third party next hop to EBGP peers in same subnet as source peer";
                }

                leaf label-preference {
                    type uint32 {
                        range "1..255";
                    }
                    description "Route preference for routes learned from labeled unicast peers";
                }

                leaf def-recv-evpn-encap {
                    type types-bgp:encap;
                    description "Default encapsulation type when EVPN route is received without BGP encapsulation extended community";
                }

                leaf multipath-eligible {
                    type boolean;
                    description
                        "Specifies if routes from this peer are eligible
                         for multipath.";
                }

                leaf group {
                    type leafref {
                        path "../../group/group-name";
                    }
                    sros-ext:immutable;
                    mandatory true;
                    description "BGP peer group";
                }

                leaf peer-creation-type {
                    type types-bgp:peer-creation-type;
                    default "static";
                    description "Peer creation type";
                }

                leaf connect-retry {
                    type int32 {
                        range "1..65535";
                    }
                    description "BGP connect retry timer value";
                }

                leaf description {
                    type types-sros:description;
                    description "Text description";
                }

                leaf admin-state {
                    type types-sros:admin-state;
                    default "enable";
                    description "Administrative state of BGP peer";
                }

                leaf keepalive {
                    type int32 {
                        range "0..21845";
                    }
                    description "Time after which the keepalive message is sent";
                }

                leaf damping {
                    type boolean;
                    description "Use BGP route damping for learned routes defined within the route policy";
                }

                leaf local-preference {
                    type int64 {
                        range "0..4294967295";
                    }
                    description "Default value for local preference attribute if not specified in incoming routes";
                }

                leaf loop-detect {
                    type types-bgp:loop-detect;
                    description "Loop detection strategy in AS path";
                }

                leaf loop-detect-threshold {
                    type uint32 {
                        range "0..15";
                    }
                    description "Configure the limit for the number of times global ASN appears in a received AS path&.";
                }

                leaf min-route-advertisement {
                    type int16 {
                        range "1..255";
                    }
                    description "Minimum interval between successive updates of prefix toward peer";
                }

                leaf aggregator-id-zero {
                    type boolean;
                    description "Set router ID in aggregator path attribute to zero when BGP aggregates routes";
                }

                leaf preference {
                    type uint32 {
                        range "1..255";
                    }
                    description "Route preference for routes learned from all peers";
                }

                leaf multihop {
                    type int32 {
                        range "1..255";
                    }
                    description "TTL value in the P header of packets sent to a peer";
                }

                leaf med-out {
                    type union {
                        type uint32;
                        type enumeration {
                            enum "igp-cost"                     { value -1; }
                        }
                    }
                    description "Multi-Exit Discriminator (MED) identifier";
                }

                leaf authentication-key {
                    type types-sros:encrypted-leaf {
                        length "1..370";
                    }
                    description "Configure the BGP authentication key for all peers.";
                }

                leaf client-reflect {
                    type boolean;
                    description "Enable client reflection of routes by the route reflector";
                }

                leaf vpn-apply-export {
                    type boolean;
                    description "Apply base instance BGP export route polices to BGP VPN routes";
                }

                leaf vpn-apply-import {
                    type boolean;
                    description "Apply base instance BGP import route polices to BGP VPN routes";
                }

                leaf asn-4-byte {
                    type boolean;
                    description "Allow use of 4-byte ASNs";
                }

                leaf path-mtu-discovery {
                    type boolean;
                    description "Allow path MTU discovery for associated TCP connections";
                }

                leaf local-address {
                    type types-bgp:local-address;
                    description "Local IP address used by neighbor when communicating with BGP peers";
                }

                leaf l2vpn-cisco-interop {
                    type boolean;
                    default "false";
                    description "Allow translation between non-compliant NLRI format of Cisco";
                }

                leaf next-hop-self {
                    type boolean;
                    description "Advertise routes to peer using next hop path attribute set to itself";
                }

                leaf passive {
                    type boolean;
                    description "Enable passive mode for BGP group";
                }

                leaf type {
                    type types-bgp:peer-type;
                    description "Peer as internal (IBGP) or external (EBGP)";
                }

                leaf peer-as {
                    type uint32 {
                        range "1..4294967295";
                    }
                    description "AS number for the remote peer";
                }

                leaf capability-negotiation {
                    type boolean;
                    description "Enable capability negotiation";
                }

                leaf enforce-first-as {
                    type boolean;
                    description "Compare most recent ASN in AS_PATH attribute of each route to configured peer AS of session for match";
                }

                leaf initial-send-delay-zero {
                    type boolean;
                    description "Bypass minimum route advertisement interval and send BGP updates as soon as session comes up";
                }

                leaf-list apply-groups {
                    type leafref {
                        path "../../../../groups/group/name";
                    }
                    max-elements 8;
                    ordered-by user;
                    description "Apply a configuration group at this level";
                }

                container next-hop-unchanged {
                    presence "Configure next-hop-unchanged.";
                    description "Enter the next-hop-unchanged context";

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Send labeled IPv4 routes to peers with unchanged BGP next-hops";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Send labeled IPv6 routes to peers with unchanged BGP next-hops";
                    }

                } // container next-hop-unchanged

                container origin-validation {
                    presence "Configure origin-validation.";
                    description "Enter the origin-validation context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Support unlabeled unicast IPv4 routes";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv6.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label-ipv4.";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label-ipv6.";
                    }

                } // container origin-validation

                container link-bandwidth {
                    description "Enter the link-bandwidth context";

                    container accept-from-ebgp {
                        presence
                            "Families for whom the Link Bandwidth extended community
                             are allowed when a route is leared by a IBGP peer from a
                             EBGP peer.";
                        description "Enter the accept-from-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container accept-from-ebgp

                    container add-to-received-ebgp {
                        presence
                            "Adds link-bandwidth Extended Community to all the
                             received EBGP multi-paths that is based on actual link speed.";
                        description "Enter the add-to-received-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container add-to-received-ebgp

                    container aggregate-used-paths {
                        presence
                            "Families for whom the link-bandwidth sum accross all multipaths
                             are advertised along with extended community.";
                        description "Enter the aggregate-used-paths context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container aggregate-used-paths

                    container send-to-ebgp {
                        presence
                            "Families for whom the Link Bandwidth extended community
                             are allowed when a route is advertised by a IBGP peer to a
                             EBGP peer.";
                        description "Enter the send-to-ebgp context";

                        leaf ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv4 routes";
                        }

                        leaf ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to unlabeled unicast IPv6 routes";
                        }

                        leaf vpn-ipv4 {
                            type boolean;
                            default "false";
                            description "Support VPN IPv4 address family";
                        }

                        leaf vpn-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to IPv6 VPN (SAFI 128) routes";
                        }

                        leaf label-ipv4 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv4 routes";
                        }

                        leaf label-ipv6 {
                            type boolean;
                            default "false";
                            description "Support Link Bandwidth EC to labeled unicast IPv6 routes";
                        }

                    } // container send-to-ebgp

                } // container link-bandwidth

                container send-communities {
                    description "Enter the send-communities context";

                    leaf standard {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for non-external communities.";
                    }

                    leaf extended {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for external communities.";
                    }

                    leaf large {
                        type boolean;
                        description
                            "Enables the sending of community attribute to the
                             peer for large communities.";
                    }

                } // container send-communities

                container error-handling {
                    description "Enter the error-handling context";

                    leaf update-fault-tolerance {
                        type boolean;
                        description "Consider non-critical errors as treat-as-withdraw and do not trigger session reset";
                    }

                } // container error-handling

                container damp-peer-oscillations {
                    presence "Timers settings for damp-peer-oscillation";
                    description "Enter the damp-peer-oscillations context";

                    leaf error-interval {
                        type uint32 {
                            range "0..2048";
                        }
                        default "30";
                        description "Error free interval after session reset, to return idle-hold-time to initial-wait";
                    }

                    container idle-hold-time {
                        description "Enter the idle-hold-time context";

                        leaf initial-wait {
                            type uint32 {
                                range "0..2048";
                            }
                            default "0";
                            description "Time a session remains in idle state after session stabilized";
                        }

                        leaf second-wait {
                            type uint32 {
                                range "1..2048";
                            }
                            default "5";
                            description "Time that doubles after each session failure within relatively short time";
                        }

                        leaf max-wait {
                            type uint32 {
                                range "1..2048";
                            }
                            default "60";
                            description "Maximum session idle time after repeated instability";
                        }

                    } // container idle-hold-time

                } // container damp-peer-oscillations

                container hold-time {
                    description "Enter the hold-time context";

                    leaf seconds {
                        type int32 {
                            range "0|3..65535";
                        }
                        description "BGP hold time";
                    }

                    leaf minimum-hold-time {
                        type int32 {
                            range "0|3..65536";
                        }
                        default "0";
                        description "Minimum hold time that is strictly enforced";
                    }

                } // container hold-time

                container family {
                    presence "Configure family for BGP.";
                    description "Enter the family context";

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Support IPv4 address family";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv4 address family";
                    }

                    leaf ipv6 {
                        type boolean;
                        default "false";
                        description "Support IPv6 address family";
                    }

                    leaf mcast-ipv4 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv4 address family";
                    }

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support VPN IPv6 address family";
                    }

                    leaf l2-vpn {
                        type boolean;
                        default "false";
                        description "Support L2 VPN address family";
                    }

                    leaf mvpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv4 address family";
                    }

                    leaf mdt-safi {
                        type boolean;
                        default "false";
                        description "Support Multicast Distribution Tree (MDT) SAFI address family";
                    }

                    leaf ms-pw {
                        type boolean;
                        default "false";
                        description "Support multi-segment pseudowire address family";
                    }

                    leaf flow-ipv4 {
                        type boolean;
                        default "false";
                        description "Support flowspec IPv4 address family";
                    }

                    leaf route-target {
                        type boolean;
                        default "false";
                        description "Support address family for RT constrain routes";
                    }

                    leaf mcast-vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Support multicast VPN IPv4 address family";
                    }

                    leaf mvpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support MVPN IPv6 address family";
                    }

                    leaf flow-ipv6 {
                        type boolean;
                        default "false";
                        description "Support flowspec IPv6 address family";
                    }

                    leaf evpn {
                        type boolean;
                        default "false";
                        description "Support EVPN address family";
                    }

                    leaf mcast-ipv6 {
                        type boolean;
                        default "false";
                        description "Support multicast IPv6 address family";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv4 address family";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Support labeled IPv6 address family";
                    }

                    leaf bgp-ls {
                        type boolean;
                        default "false";
                        description "Support BGP-LS address family";
                    }

                    leaf mcast-vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Support multicast VPN IPv6 address family";
                    }

                    leaf sr-policy-ipv4 {
                        type boolean;
                        default "false";
                        description "Advertise capability for AFI1/SAFI73, BGP routes that encode an SR policy to an IPv4 destination";
                    }

                } // container family

                container default-preference {
                    description "Configure the route preference for ebgp and ibgp routes.";

                    leaf ebgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ebgp.";
                    }

                    leaf ibgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ibgp.";
                    }

                } // container default-preference

                container default-label-preference {
                    description "Configure the route label preference for ebgp and ibgp routes.";

                    leaf ebgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ebgp.";
                    }

                    leaf ibgp {
                        type uint32 {
                            range "0..255";
                        }
                        description "Configure preference for ibgp.";
                    }

                } // container default-label-preference

                container remove-private {
                    presence "Remove private AS numbers from the AS Path before advertising to a peer.";
                    description "Enter the remove-private context";

                    leaf limited {
                        type boolean;
                        default "false";
                        description "Remove private AS numbers up to first public ASN encountered";
                    }

                    leaf skip-peer-as {
                        type boolean;
                        default "false";
                        description "Keep a private ASN in the AS path if that ASN is the same as the BGP peer ASN";
                    }

                } // container remove-private

                container cluster {
                    description "Enter the cluster context";

                    leaf cluster-id {
                        type types-sros:ipv4-address;
                        description "Cluster ID for route reflector server";
                    }

                    leaf orr-location {
                        type uint32 {
                            range "1..16";
                        }
                        description "Optimal route reflection location for cluster ID";
                    }

                    leaf allow-local-fallback {
                        type boolean;
                        default "false";
                        description "Allow fallback to RR default location when no BGP routes reachable from  ORR location";
                    }

                } // container cluster

                container ebgp-default-reject-policy {
                    presence "Configure default reject behavior for BGP";
                    description
                        "Configure the BGP default policy for routes received from or advertised
                         to external peers.";

                    leaf import {
                        type boolean;
                        default "true";
                        description "Enable/disable default reject import policy for external peers.";
                    }

                    leaf export {
                        type boolean;
                        default "true";
                        description "Enable/disable default reject export policy for external peers.";
                    }

                } // container ebgp-default-reject-policy

                container local-as {
                    description "Enter the local-as context";

                    leaf as-number {
                        type uint32 {
                            range "1..4294967295";
                        }
                        description "BGP AS number";
                    }

                    leaf private {
                        type boolean;
                        default "false";
                        description "Hide local AS number in paths learned from peering";
                    }

                    leaf prepend-global-as {
                        type boolean;
                        default "true";
                        description "Prepend global AS number when advertising routes to EBGP peer";
                    }

                } // container local-as

                container add-paths {
                    presence "Famly settings for add-paths";
                    description "Enter the add-paths context";

                    container ipv4 {
                        description "Enter the ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per unlabeled IPv4 unicast prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple unlabeled unicast routes per IPv4 prefix";
                        }

                    } // container ipv4

                    container ipv6 {
                        description "Enter the ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per unlabeled unicast IPv6 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple unlabeled unicast routes per IPv6 prefix";
                        }

                    } // container ipv6

                    container label-ipv4 {
                        description "Enter the label-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per labeled-unicast IPv4  prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple labeled-unicast routes per IPv4 prefix";
                        }

                    } // container label-ipv4

                    container label-ipv6 {
                        description "Enter the label-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per labeled-unicast IPv6  prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple labeled-unicast routes per IPv6 prefix";
                        }

                    } // container label-ipv6

                    container vpn-ipv4 {
                        description "Enter the vpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per VPN-IPv4 NLRI that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive VPN-IPv4 routes";
                        }

                    } // container vpn-ipv4

                    container vpn-ipv6 {
                        description "Enter the vpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per VPN-IPv6 NLRI that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple VPN-IPv6 routes";
                        }

                    } // container vpn-ipv6

                    container mvpn-ipv4 {
                        description "Enter the mvpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast VPN routes per IPv4 prefix";
                        }

                    } // container mvpn-ipv4

                    container mvpn-ipv6 {
                        description "Enter the mvpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv6 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                        }

                    } // container mvpn-ipv6

                    container mcast-vpn-ipv4 {
                        description "Enter the mcast-vpn-ipv4 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast VPN IPv4 prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv4 VPN prefix";
                        }

                    } // container mcast-vpn-ipv4

                    container mcast-vpn-ipv6 {
                        description "Enter the mcast-vpn-ipv6 context";

                        leaf send {
                            type int32 {
                                range "1..16";
                            }
                            description "Maximum number of paths per multicast IPv6 VPN prefix that can be advertised to add-path peers";
                        }

                        leaf receive {
                            type boolean;
                            default "false";
                            description "Negotiate to receive multiple multicast routes per IPv6 VPN prefix";
                        }

                    } // container mcast-vpn-ipv6

                } // container add-paths

                container import {
                    presence "Enables bgp import polices at the neighbor level";
                    description "Enter the import context";

                    leaf-list policy {
                        type string {
                            length "1..255";
                            pattern "(.{1,64})|(.*[\\[].*)" {
                                error-message "Policy name too long or expression not valid";
                            }
                        }
                        min-elements 1;
                        max-elements 15;
                        ordered-by user;
                        description "Import policy name";
                    }

                } // container import

                container export {
                    presence "Enables bgp export polices at the peer level";
                    description "Enter the export context";

                    leaf-list policy {
                        type string {
                            length "1..255";
                            pattern "(.{1,64})|(.*[\\[].*)" {
                                error-message "Policy name too long or expression not valid";
                            }
                        }
                        min-elements 1;
                        max-elements 15;
                        ordered-by user;
                        description "Export policy name";
                    }

                } // container export

                container extended-nh-encoding {
                    presence
                        "families the Bgp instance is configured
                         to support extended next-hop encoding.";
                    description "Enter the extended-nh-encoding context";

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv4.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv4.";
                    }

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv4.";
                    }

                } // container extended-nh-encoding

                container advertise-ipv6-next-hops {
                    presence "families extended next-hop encoding is supported for.";
                    description "Enter the advertise-ipv6-next-hops context";

                    leaf vpn-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv6.";
                    }

                    leaf label-ipv6 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv6.";
                    }

                    leaf evpn {
                        type boolean;
                        default "false";
                        description "Enable/disable family type evpn.";
                    }

                    leaf vpn-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type VPN IPv4.";
                    }

                    leaf label-ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type label IPv4.";
                    }

                    leaf ipv4 {
                        type boolean;
                        default "false";
                        description "Enable/disable family type ipv4.";
                    }

                } // container advertise-ipv6-next-hops

                container graceful-restart {
                    presence "Enable/disable graceful-restart for BGP neighbor.";
                    description "Enter the graceful-restart context";

                    leaf restart-time {
                        type uint32 {
                            range "0..4095";
                        }
                        default "300";
                        description "BGP graceful restart time";
                    }

                    leaf stale-routes-time {
                        type uint32 {
                            range "1..3600";
                        }
                        default "360";
                        description "Maximum time that stale routes maintain after graceful restart is initiated";
                    }

                    leaf gr-notification {
                        type boolean;
                        default "false";
                        description "Enable graceful restart capability indicating support for NOTIFICATION messages";
                    }

                    container long-lived {
                        presence "Long Lived Graceful restart attributes for all BGP group.";
                        description "Enter the long-lived context";

                        leaf advertised-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            default "86400";
                            description "Long-lived stale time that is advertised by router in its LLGR capability";
                        }

                        leaf helper-override-stale-time {
                            type uint32 {
                                range "0..16777215";
                            }
                            description "Locally-imposed LLGR stale time";
                        }

                        leaf helper-override-restart-time {
                            type uint32 {
                                range "0..4095";
                            }
                            description "Locally-imposed restart time for all AFI/SAFI included in the peer's GR capability";
                        }

                        leaf forwarding-bits-set {
                            type enumeration {
                                enum "none"                         { value 0; }
                                enum "all"                          { value 1; }
                                enum "non-fwd"                      { value 2; }
                            }
                            default "none";
                            description "BGP LLGR forwarding bit behavior for F bit in AFI or SAFI";
                        }

                        leaf advertise-stale-to-all-neighbors {
                            type boolean;
                            default "false";
                            description "Advertise BGP routes marked as LLGR stale to BGP peers";
                        }

                        leaf without-no-export {
                            type boolean;
                            default "false";
                            description "Allow LLGR stale routes to be advertised to any peer that did not signal the LLGR capability";
                        }

                        list family {
                            key "family-type";
                            description "Enter the family context";

                            leaf family-type {
                                type types-bgp:llgr-family-identifiers;
                                description "Address family type for LLGR";
                            }

                            leaf advertised-stale-time {
                                type uint32 {
                                    range "0..16777215";
                                }
                                default "86400";
                                description "Long-lived stale time that is advertised by router in its LLGR capability";
                            }

                            leaf helper-override-stale-time {
                                type uint32 {
                                    range "0..16777216";
                                }
                                default "16777216";
                                description "Locally-imposed LLGR stale time";
                            }

                        } // list family

                    } // container long-lived

                } // container graceful-restart

                container outbound-route-filtering {
                    presence "Enable/disable outbound route filtering for the group.";
                    description "Enter the outbound-route-filtering context";

                    container extended-community {
                        presence "Enable/disable outbound route filtering using extended communities.";
                        description "Enter the extended-community context";

                        leaf accept-orf {
                            type boolean;
                            description "Negotiate BGP ORF receive capabilities with peer";
                        }

                        container send-orf {
                            presence "Add/remove members to the send ORF list.";
                            description "Enter the send-orf context";

                            list route-target {
                                key "community-name";
                                description "Enter the route-target context";

                                leaf community-name {
                                    type types-sros:named-item;
                                    description "Extended community name that is accepted by route reflector server, or advertised by router";
                                }

                            } // list route-target

                        } // container send-orf

                    } // container extended-community

                } // container outbound-route-filtering

                container monitor {
                    presence "Contains all the BMP related configuration for a bgp-neighbor.";
                    description "Enter the monitor context";

                    leaf all-stations {
                        type boolean;
                        default "false";
                        description "Use all BMP monitoring stations";
                    }

                    leaf admin-state {
                        type types-sros:admin-state;
                        default "disable";
                        description "Administrative state of BMP monitoring";
                    }

                    container route-monitoring {
                        description "Enter the route-monitoring context";

                        leaf pre-policy {
                            type boolean;
                            default "false";
                            description "Send pre-policy route monitoring messages";
                        }

                        leaf post-policy {
                            type boolean;
                            default "false";
                            description "Send post-policy monitoring messages";
                        }

                    } // container route-monitoring

                    list station {
                        key "station-name";
                        max-elements 8;
                        description "Enter the station context";

                        leaf station-name {
                            type leafref {
                                path "../../../../../../bmp/station/name";
                            }
                            description "BMP monitoring station";
                        }

                    } // list station

                } // container monitor

                list prefix-limit {
                    key "family";
                    description "Enter the prefix-limit context";

                    leaf family {
                        type types-bgp:ip-family-identifier;
                        description "Address family to which the limit applies";
                    }

                    leaf maximum {
                        type uint32 {
                            range "1..4294967295";
                        }
                        mandatory true;
                        description "Specifies the maximum number of routes that can be learned from this peer.";
                    }

                    leaf log-only {
                        type boolean;
                        default "false";
                        description "Send warning message if specified threshold or limit is reached, without disabling BGP peer session";
                    }

                    leaf threshold {
                        type uint32 {
                            range "1..100";
                        }
                        default "90";
                        description "Threshold value that triggers a warning message";
                    }

                    leaf idle-timeout {
                        type int32 {
                            range "1..1024";
                        }
                        description "Time that BGP peering remains idle before reconnecting to peers";
                    }

                    leaf post-import {
                        type boolean;
                        default "false";
                        description "Apply prefix limit only to number of routes accepted by import policies";
                    }

                    leaf-list apply-groups {
                        type leafref {
                            path "../../../../../groups/group/name";
                        }
                        max-elements 8;
                        ordered-by user;
                        description "Apply a configuration group at this level";
                    }

                } // list prefix-limit

            } // list neighbor

        } // container bgp

    } // grouping conf-router-bgp

}
